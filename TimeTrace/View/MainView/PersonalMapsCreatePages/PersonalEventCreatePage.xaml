<Page
	x:Class="TimeTrace.View.MainView.PersonalMapsCreatePages.PersonalEventCreatePage"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:converters="using:TimeTrace.View.Converters"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:local="using:TimeTrace.Model.Events"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d">

	<Page.Resources>
		<ResourceDictionary>
			<converters:FromNullableIntToIntConverter x:Key="fromNullableIntToIntConverter" />
			<converters:FromIntToSolidColorBrushConverter x:Key="fromIntToSolidColorBrushConverter" />
			<converters:FromUtcToLocalTimeConverter x:Key="fromUtcToLocalTimeConverter" />
			<converters:FromRepeatModeToIntConverter x:Key="fromRepeatModeToIntConverter" />
			<Style TargetType="StackPanel">
				<Setter Property="Transitions">
					<Setter.Value>
						<TransitionCollection>
							<EntranceThemeTransition />
						</TransitionCollection>
					</Setter.Value>
				</Setter>
			</Style>
			<Style TargetType="PivotHeaderItem">
				<Setter Property="FontSize" Value="{ThemeResource PivotHeaderItemFontSize}" />
				<Setter Property="FontFamily" Value="{ThemeResource PivotHeaderItemFontFamily}" />
				<Setter Property="FontWeight" Value="{ThemeResource PivotHeaderItemThemeFontWeight}" />
				<Setter Property="CharacterSpacing" Value="{ThemeResource PivotHeaderItemCharacterSpacing}" />
				<Setter Property="Background" Value="{ThemeResource PivotHeaderItemBackgroundUnselected}" />
				<Setter Property="Foreground" Value="{ThemeResource PivotHeaderItemForegroundUnselected}" />
				<Setter Property="Padding" Value="{ThemeResource PivotHeaderItemMargin}" />
				<Setter Property="Height" Value="48" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Setter Property="IsTabStop" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="PivotHeaderItem">
							<Grid
								x:Name="Grid"
								Padding="{TemplateBinding Padding}"
								Background="{TemplateBinding Background}">
								<Grid.RenderTransform>
									<TranslateTransform x:Name="ContentPresenterTranslateTransform" />
								</Grid.RenderTransform>
								<ContentPresenter
									x:Name="ContentPresenter"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									Content="{TemplateBinding Content}"
									ContentTemplate="{TemplateBinding ContentTemplate}"
									FontFamily="{TemplateBinding FontFamily}"
									FontSize="{TemplateBinding FontSize}"
									FontWeight="{TemplateBinding FontWeight}"
									OpticalMarginAlignment="TrimSideBearings" />
								<Rectangle
									x:Name="FocusPipe"
									Height="2"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Bottom"
									Fill="{ThemeResource PivotHeaderItemFocusPipeFill}"
									Visibility="Collapsed" />
								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="SelectionStates">
										<VisualStateGroup.Transitions>
											<VisualTransition
												GeneratedDuration="0:0:0.33"
												From="Unselected"
												To="UnselectedLocked" />
											<VisualTransition
												GeneratedDuration="0:0:0.33"
												From="UnselectedLocked"
												To="Unselected" />
										</VisualStateGroup.Transitions>
										<VisualState x:Name="Disabled">
											<Storyboard>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
													<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PivotHeaderItemForegroundDisabled}" />
												</ObjectAnimationUsingKeyFrames>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="Grid" Storyboard.TargetProperty="Background">
													<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PivotHeaderItemBackgroundDisabled}" />
												</ObjectAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
										<VisualState x:Name="Unselected" />
										<VisualState x:Name="UnselectedLocked">
											<Storyboard>
												<DoubleAnimation
													Storyboard.TargetName="ContentPresenterTranslateTransform"
													Storyboard.TargetProperty="X"
													To="{ThemeResource PivotHeaderItemLockedTranslation}"
													Duration="0" />
												<DoubleAnimation
													Storyboard.TargetName="ContentPresenter"
													Storyboard.TargetProperty="(UIElement.Opacity)"
													To="0"
													Duration="0" />
											</Storyboard>
										</VisualState>
										<VisualState x:Name="Selected">
											<VisualState.Setters>
												<Setter Target="FocusPipe.Visibility" Value="Visible" />
											</VisualState.Setters>
											<Storyboard>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
													<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PivotHeaderItemForegroundSelected}" />
												</ObjectAnimationUsingKeyFrames>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="Grid" Storyboard.TargetProperty="Background">
													<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PivotHeaderItemBackgroundSelected}" />
												</ObjectAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
										<VisualState x:Name="UnselectedPointerOver">
											<Storyboard>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
													<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PivotHeaderItemForegroundUnselectedPointerOver}" />
												</ObjectAnimationUsingKeyFrames>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="Grid" Storyboard.TargetProperty="Background">
													<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PivotHeaderItemBackgroundUnselectedPointerOver}" />
												</ObjectAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
										<VisualState x:Name="SelectedPointerOver">
											<VisualState.Setters>
												<Setter Target="FocusPipe.Visibility" Value="Visible" />
											</VisualState.Setters>
											<Storyboard>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
													<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PivotHeaderItemForegroundSelectedPointerOver}" />
												</ObjectAnimationUsingKeyFrames>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="Grid" Storyboard.TargetProperty="Background">
													<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PivotHeaderItemBackgroundSelectedPointerOver}" />
												</ObjectAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
										<VisualState x:Name="UnselectedPressed">
											<Storyboard>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
													<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PivotHeaderItemForegroundUnselectedPressed}" />
												</ObjectAnimationUsingKeyFrames>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="Grid" Storyboard.TargetProperty="Background">
													<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PivotHeaderItemBackgroundUnselectedPressed}" />
												</ObjectAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
										<VisualState x:Name="SelectedPressed">
											<VisualState.Setters>
												<Setter Target="FocusPipe.Visibility" Value="Visible" />
											</VisualState.Setters>
											<Storyboard>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
													<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PivotHeaderItemForegroundSelectedPressed}" />
												</ObjectAnimationUsingKeyFrames>
												<ObjectAnimationUsingKeyFrames Storyboard.TargetName="Grid" Storyboard.TargetProperty="Background">
													<DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource PivotHeaderItemBackgroundSelectedPressed}" />
												</ObjectAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
									<VisualStateGroup x:Name="FocusStates">
										<VisualState x:Name="Focused">
											<VisualState.Setters>
												<Setter Target="FocusPipe.Visibility" Value="Visible" />
											</VisualState.Setters>
										</VisualState>
										<VisualState x:Name="Unfocused" />
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="/ResourceDictionaries/MainDictionary.xaml" />
			</ResourceDictionary.MergedDictionaries>
		</ResourceDictionary>
	</Page.Resources>

	<Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">

		<Pivot
			Title="Temp"
			Padding="10,0,0,0"
			SelectedIndex="{x:Bind ViewModel.StartTabIndex, Mode=OneWay}">
			<Pivot.TitleTemplate>
				<DataTemplate>
					<TextBlock
						x:Uid="/EventView/PageTitle"
						Margin="6,0,0,-15"
						FontSize="35"
						FontWeight="SemiLight"
						TextWrapping="WrapWholeWords" />
				</DataTemplate>
			</Pivot.TitleTemplate>

			<PivotItem x:Uid="/EventView/LookInside" Padding="-15,0,0,0">
				<Grid>
					<Grid.RowDefinitions>
						<RowDefinition />
						<RowDefinition Height="10" />
					</Grid.RowDefinitions>

					<ScrollViewer VerticalScrollBarVisibility="Auto">
						<StackPanel>
							<ListView
								x:Name="MapEventsList"
								Grid.Row="1"
								Padding="15,5,17,5"
								DoubleTapped="{x:Bind ScheduleViewModel.MoreAboutMapEvent}"
								ItemsSource="{x:Bind ScheduleViewModel.MapEvents, Mode=TwoWay}"
								RightTapped="{x:Bind ScheduleViewModel.SelectItemOnRightClick}"
								SelectedIndex="{x:Bind ScheduleViewModel.SelectedMapEvent, Mode=TwoWay, Converter={StaticResource fromNullableIntToIntConverter}}"
								SelectionChanged="{x:Bind ScheduleViewModel.MultipleEventsSelection}"
								SelectionMode="{x:Bind ScheduleViewModel.MultipleSelection, Mode=TwoWay}">
								<ListView.ItemContainerStyle>
									<Style TargetType="ListViewItem">
										<Setter Property="BorderBrush" Value="Gray" />
										<Setter Property="BorderThickness" Value="0,.4,0,0" />
										<Setter Property="HorizontalContentAlignment" Value="Stretch" />
									</Style>
								</ListView.ItemContainerStyle>
								<ListView.ItemTemplate>
									<DataTemplate x:DataType="local:MapEvent">
										<StackPanel>
											<Grid Margin="0,5,10,0">
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="Auto" />
													<ColumnDefinition />
												</Grid.ColumnDefinitions>

												<Ellipse
													Width="15"
													Height="15"
													VerticalAlignment="Center"
													Fill="{x:Bind Color, Converter={StaticResource fromIntToSolidColorBrushConverter}}" />

												<TextBlock
													Grid.Column="1"
													Margin="5,0,0,0"
													VerticalAlignment="Center"
													FontSize="26"
													Text="{x:Bind Name}"
													TextTrimming="WordEllipsis" />

											</Grid>

											<StackPanel Orientation="Horizontal">
												<TextBlock
													x:Uid="/ScheduleView/Time"
													Margin="0,0,0,2"
													FontSize="17"
													Foreground="LightSlateGray" />
												<TextBlock
													Margin="7,0,7,2"
													FontSize="17"
													Foreground="LightSlateGray"
													Text="{x:Bind Start, Converter={StaticResource fromUtcToLocalTimeConverter}}" />
												<TextBlock
													Margin="0,0,0,1"
													FontSize="17"
													Foreground="LightSlateGray"
													Text="-" />
												<TextBlock
													Margin="7,0,7,1"
													FontSize="17"
													Foreground="LightSlateGray"
													Text="{x:Bind End, Converter={StaticResource fromUtcToLocalTimeConverter}}" />
											</StackPanel>

											<TextBlock
												Margin="0,0,0,5"
												FontSize="18"
												MaxLines="2"
												Text="{x:Bind Description, TargetNullValue=Отсутствует}"
												TextTrimming="WordEllipsis"
												TextWrapping="WrapWholeWords" />
										</StackPanel>
									</DataTemplate>
								</ListView.ItemTemplate>
								<ListView.ContextFlyout>
									<MenuFlyout Placement="Bottom">
										<MenuFlyoutItem
											x:Uid="/ScheduleView/MoreDetails"
											Click="{x:Bind ScheduleViewModel.MoreAboutMapEvent}"
											Icon="Page" />
										<MenuFlyoutSeparator />
										<MenuFlyoutItem
											x:Uid="/ScheduleView/Edit"
											Click="{x:Bind ScheduleViewModel.MapEventEditAsync}"
											Icon="Edit" />
										<MenuFlyoutItem
											x:Uid="/ScheduleView/Remove"
											Click="{x:Bind ScheduleViewModel.MapEventRemove}"
											Icon="Delete" />
									</MenuFlyout>
								</ListView.ContextFlyout>
							</ListView>
						</StackPanel>
					</ScrollViewer>
				</Grid>
			</PivotItem>

			<PivotItem Padding="-15,0,0,0" Header="{x:Bind ViewModel.Header}">
				<Grid>
					<Grid.RowDefinitions>
						<RowDefinition />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>

					<ScrollViewer VerticalScrollBarVisibility="Auto">

						<VariableSizedWrapGrid
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Orientation="Horizontal">
							<StackPanel>
								<TextBox
									x:Uid="/EventView/EventName"
									Width="370"
									MaxWidth="370"
									Margin="15,5,15,5"
									HorizontalAlignment="Center"
									IsSpellCheckEnabled="True"
									MaxLength="50"
									Text="{x:Bind ViewModel.CurrentMapEvent.Name, Mode=TwoWay}" />

								<TextBox
									x:Uid="/EventView/EventDescription"
									Height="130"
									MaxWidth="370"
									MaxHeight="130"
									Margin="15,5,15,5"
									AcceptsReturn="True"
									IsSpellCheckEnabled="True"
									MaxLength="200"
									Text="{x:Bind ViewModel.CurrentMapEvent.Description, Mode=TwoWay}"
									TextWrapping="Wrap" />
							</StackPanel>

							<StackPanel>

								<AutoSuggestBox
									x:Uid="/EventView/EventPlace"
									MaxWidth="370"
									Margin="15,5,15,5"
									QueryIcon="Globe"
									Text="{x:Bind ViewModel.CurrentMapEvent.Location, Mode=TwoWay}" />

								<AutoSuggestBox
									x:Uid="/EventView/EventContact"
									MaxWidth="370"
									Margin="15,5,15,5"
									ItemsSource="{x:Bind ViewModel.MapEventsPersonsSuggestList, Mode=TwoWay}"
									QueryIcon="Contact"
									Text="{x:Bind ViewModel.CurrentMapEvent.UserBind, Mode=TwoWay}"
									TextChanged="{x:Bind ViewModel.MapEventsPersonsFilter}" />

								<CheckBox
									x:Uid="/EventView/IsPublic"
									Margin="15,5,15,0"
									VerticalAlignment="Center"
									IsChecked="{x:Bind ViewModel.CurrentMapEvent.IsPublic, Mode=TwoWay}" />

								<CheckBox
									x:Uid="/EventView/WinTenCalendarBinding"
									Width="300"
									Margin="15,-10,15,5"
									VerticalAlignment="Center"
									IsChecked="{x:Bind ViewModel.IsBindingForWindowsCalendar, Mode=TwoWay}" />

							</StackPanel>

							<StackPanel>
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition />
									</Grid.ColumnDefinitions>

									<CalendarDatePicker
										x:Uid="/EventView/StartDate"
										Width="180"
										Margin="15,5,10,5"
										Date="{x:Bind ViewModel.StartDate, Mode=TwoWay}"
										DateFormat="{}{day.integer} {month.full} {year.full}"
										MinDate="{x:Bind ViewModel.MinDate}" />

									<TimePicker
										x:Uid="/EventView/StartTime"
										Grid.Column="1"
										Width="180"
										MinWidth="180"
										Margin="0,5,15,5"
										HorizontalAlignment="Right"
										IsEnabled="{x:Bind ViewModel.IsNotAllDay, Mode=OneWay}"
										Time="{x:Bind ViewModel.StartTime, Mode=TwoWay}" />
								</Grid>

								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition />
									</Grid.ColumnDefinitions>

									<CalendarDatePicker
										x:Uid="/EventView/EndDate"
										Width="180"
										Margin="15,5,10,5"
										Date="{x:Bind ViewModel.EndDate, Mode=TwoWay}"
										DateFormat="{}{day.integer} {month.full} {year.full}"
										IsEnabled="{x:Bind ViewModel.IsNotAllDay, Mode=OneWay}"
										MinDate="{x:Bind ViewModel.MinDate}" />

									<TimePicker
										x:Uid="/EventView/EndTime"
										Grid.Column="1"
										Width="180"
										MinWidth="180"
										Margin="0,5,15,5"
										HorizontalAlignment="Right"
										IsEnabled="{x:Bind ViewModel.IsNotAllDay, Mode=OneWay}"
										Time="{x:Bind ViewModel.EndTime, Mode=TwoWay}" />
								</Grid>

								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="205" />
										<ColumnDefinition />
									</Grid.ColumnDefinitions>

									<ComboBox
										x:Uid="/EventView/RepetitionMode"
										Grid.Column="0"
										Margin="15,5,10,5"
										HorizontalAlignment="Stretch"
										SelectedIndex="{x:Bind ViewModel.SelectedRepeatMode, Mode=TwoWay, Converter={StaticResource fromRepeatModeToIntConverter}}">
										<ComboBoxItem x:Uid="/EventView/NoRepetition" />
										<ComboBoxItem x:Uid="/EventView/EveryDate" />
										<ComboBoxItem x:Uid="/EventView/AfterOneDate" />
										<ComboBoxItem x:Uid="/EventView/OnceWeek" />
										<ComboBoxItem x:Uid="/EventView/OnceMonth" />
										<ComboBoxItem x:Uid="/EventView/OnceYear" />
										<ComboBoxItem x:Uid="/EventView/CustomRepeat" />
									</ComboBox>

									<ToggleSwitch
										x:Uid="/EventView/IsAllDay"
										Grid.Column="1"
										Margin="15,5,10,5"
										IsOn="{x:Bind ViewModel.IsNotAllDay, Mode=TwoWay}" />

								</Grid>
							</StackPanel>

							<StackPanel Visibility="{x:Bind ViewModel.CustomRepeatEnable, Mode=OneWay}">

								<ToggleSwitch
									Name="EndingForDate"
									x:Uid="/EventView/DateAsEnd"
									Margin="15,-5,0,-3"
									IsOn="{x:Bind ViewModel.IsEndingForDateSelected, Mode=TwoWay}" />

								<CalendarDatePicker
									x:Uid="/EventView/EndRepetitionDate"
									Grid.Column="1"
									Width="180"
									Margin="15,0,15,5"
									HorizontalAlignment="Left"
									Date="{x:Bind ViewModel.BeforeDateRecurrence, Mode=TwoWay}"
									DateFormat="{}{day.integer} {month.full} {year.full}"
									IsEnabled="{Binding ElementName=EndingForDate, Path=IsOn}"
									MaxDate="{x:Bind ViewModel.MaxDate.Value, Mode=OneWay}"
									MinDate="{x:Bind ViewModel.StartDate.Value, Mode=OneWay}" />

								<ToggleSwitch
									Name="EndingForRepeated"
									x:Uid="/EventView/CountAsEnd"
									Margin="15,-4,15,0"
									IsOn="{x:Bind ViewModel.IsEndingForRepeatSelected, Mode=TwoWay}" />

								<TextBox
									x:Uid="/EventView/EndRepetitionCount"
									Grid.Column="1"
									MaxWidth="150"
									Margin="15,-3,15,5"
									HorizontalAlignment="Left"
									InputScope="Number"
									IsEnabled="{Binding ElementName=EndingForRepeated, Path=IsOn}"
									Text="{x:Bind ViewModel.BeforeNumberRecurrence, Mode=OneWay}"
									TextChanged="{x:Bind ViewModel.ControlTheInputOfTheNumberOfRepetitions}" />

								<TextBlock
									x:Uid="/EventView/CustomDays"
									Margin="15,5,15,5"
									HorizontalAlignment="Left"
									Visibility="{x:Bind ViewModel.IsCustomDateOfWeekSelectingEnable, Mode=OneWay}" />

								<Grid Margin="15,0,15,0" Visibility="{x:Bind ViewModel.IsCustomDateOfWeekSelectingEnable, Mode=OneWay}">
									<Grid.ColumnDefinitions>
										<ColumnDefinition />
										<ColumnDefinition />
										<ColumnDefinition />
										<ColumnDefinition />
										<ColumnDefinition />
										<ColumnDefinition />
										<ColumnDefinition />
									</Grid.ColumnDefinitions>

									<ToggleButton
										x:Uid="/EventView/Monday"
										Height="35"
										Margin="0,0,2,0"
										HorizontalAlignment="Stretch"
										IsChecked="{x:Bind ViewModel.SelectedRepeatedDates[1], Mode=TwoWay}" />
									<ToggleButton
										x:Uid="/EventView/Tuesday"
										Grid.Column="1"
										Height="35"
										Margin="2,0,2,0"
										HorizontalAlignment="Stretch"
										IsChecked="{x:Bind ViewModel.SelectedRepeatedDates[2], Mode=TwoWay}" />
									<ToggleButton
										x:Uid="/EventView/Wednesday"
										Grid.Column="2"
										Height="35"
										Margin="2,0,2,0"
										HorizontalAlignment="Stretch"
										IsChecked="{x:Bind ViewModel.SelectedRepeatedDates[3], Mode=TwoWay}" />
									<ToggleButton
										x:Uid="/EventView/Thursday"
										Grid.Column="3"
										Height="35"
										Margin="2,0,2,0"
										HorizontalAlignment="Stretch"
										IsChecked="{x:Bind ViewModel.SelectedRepeatedDates[4], Mode=TwoWay}" />
									<ToggleButton
										x:Uid="/EventView/Friday"
										Grid.Column="4"
										Height="35"
										Margin="2,0,2,0"
										HorizontalAlignment="Stretch"
										IsChecked="{x:Bind ViewModel.SelectedRepeatedDates[5], Mode=TwoWay}" />
									<ToggleButton
										x:Uid="/EventView/Saturday"
										Grid.Column="5"
										Height="35"
										Margin="2,0,2,0"
										HorizontalAlignment="Stretch"
										IsChecked="{x:Bind ViewModel.SelectedRepeatedDates[6], Mode=TwoWay}" />
									<ToggleButton
										x:Uid="/EventView/Sunday"
										Grid.Column="6"
										Height="35"
										Margin="2,0,0,0"
										HorizontalAlignment="Stretch"
										IsChecked="{x:Bind ViewModel.SelectedRepeatedDates[0], Mode=TwoWay}" />
								</Grid>

							</StackPanel>

						</VariableSizedWrapGrid>
					</ScrollViewer>

					<StackPanel
						Grid.Row="1"
						Margin="0,0,0,5"
						HorizontalAlignment="Center">
						<TextBlock
							x:Uid="/EventView/RequiredFields"
							Margin="0,0,0,10"
							FontSize="10"
							Foreground="Gray" />
						<Button
							HorizontalAlignment="Center"
							Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
							BorderBrush="{x:Bind SolidBrush}"
							Click="{x:Bind ViewModel.EventCreateAsync}"
							Content="{x:Bind ViewModel.ActionName}" />
					</StackPanel>
				</Grid>
			</PivotItem>
		</Pivot>

	</Grid>
</Page>